program van_der_waals

use temperature
use initial
use PeriodicBoundaryConditions
use integrator
use forces_routines
use statistics
use vmd

implicit none
! N: number of time steps
! M: number of atoms
! boxL: boxlength
! mass: particle mass
! rho: density
! kBTref: reference temperature
! nf: degrees of freedom
! ecin: kinetic energy
! epot: potential energy
! temp: temperature
! F: Force Matrix
! sigma: sigma parameter of lennard jones potencial
! epsil: epsilon parameter of lennard jones potencial
! tterm: temps que tarda en termalitzar. A partir d'aquÃ­ guardem trajs
! stepwrite: cada quants steps de temps escrivim


! system parameters
integer :: M, nf, stepwrite
double precision :: boxL, mass, kBTref, tterm
double precision :: sigma, epsil, utime
! Integration parameters
integer :: i, j, N
double precision :: dt
! General variables
double precision, dimension(:,:), allocatable :: r, v, F,F_t
! Ouputs
double precision :: ecin, epot, temp
! defining parameters
parameter(M = 343, N = 500)
parameter(mass = 1., sigma=1, epsil=1)
parameter(tterm = 1., stepwrite=10)

! Defining dimensions
allocate(r(3,M), v(3,M), F(3,M),F_t(3,M))

! Init variables
kBTref = 2.
boxL=10d0 / sigma
utime = dsqrt(mass * sigma**2 / epsil) ! unit of time in LJ units
dt = 1. / 200 / utime
nf = 3 * M - 3 ! number of degrees of freedom 

do i = 1, M
   r(:,i) = i
end do


open(unit=20, file='data/prova_traj.data', status='unknown')

write(*,*) "dt=",dt
! Temporal loop
do i = 1, M
   !write trajectories
   If (i*dt>tterm .AND. mod(i,stepwrite) ==  0) then
       write (*,*) i,i*dt,r(:,i)
   endif

end do

! Save RDF

close(20)
!close(4)

end program
